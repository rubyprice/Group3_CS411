Story: As a user, I want to use login and logout authorization to protect my data.

Details: When first entering our application, the user will enter their Twitter log-in information on our homepage to serve as our user-identification. 
The application will use Twitter’s OAuth system to verify each individual user who wants to use the application. If their username and password are 
verified by Twitter, then they will be taken to their own personal movie recommendation page within our application. If they are not verified, then we 
will ask them to either try again or make a new Twitter account, and they will not be able to view any movie data. We want to have a reliable system of 
authentication, since we will be accessing information from people’s Twitter feeds, which could contain private data. Ideally, this login process will 
make it so each user will only be able to see recommendations based on their own feed, and won’t have access to anyone else’s. When a user is done viewing 
their recommendations, they should log out of their Twitter account to end their session and end browser access to their data.

While this is the ideal scenario for our application, there are many possible exceptions to the “happy path” we must consider. The first case is if the
user does not want to make a Twitter account. Since we will offer the option to sign in with their existing account or make a new one, we may run into a
scenario where a user doesn’t want to make an account. To combat this, we will have a note on the homepage to inform the user that the recommendations are
based on your Twitter feed, so you must have a Twitter account to use the app. Another possible issue could be that a person forgets to log out of their 
account when they’re done using the application. To address this possible security issue, we will have to develop a method to manually end each user’s 
session after a certain amount of time, so that the browser won’t have continued access to the user’s data.

